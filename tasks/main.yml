---
- name: docker_container guac - config
  copy:
    src: "templates/docker_container/guac/"
    dest: "{{ docker_container_guac_volume_dir }}/"
    owner: root
    group: root

- name: docker_container guac - .env
  template:
    src: templates/docker_container/guac/sample.env.j2
    dest: "{{ docker_container_guac_volume_dir }}/.env"
  register: docker_container_guac_env_result

- name: docker_container guac - schema.sql
  template:
    src: templates/docker_container/guac/schema.sql.j2
    dest: "{{ docker_container_guac_volume_dir }}/mysql_init/schema.sql"

- name: docker_container guac - auth-totp extenstions directory
  file:
    path: "{{ docker_container_guac_volume_dir }}/guac_home/extensions"
    state: directory
  tags: docker_container_guac_mfa
  when: guac_mfa_enabled

- name: docker_container guac - download auth-totp
  unarchive:
    src: 'https://apache.org/dyn/closer.lua/guacamole/{{ docker_container_guac_version }}/binary/guacamole-auth-totp-{{ docker_container_guac_version }}.tar.gz?action=download'
    dest: '{{ docker_container_guac_volume_dir }}'
    creates: '{{ docker_container_guac_volume_dir }}/guacamole-auth-totp-{{ docker_container_guac_version }}/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    remote_src: yes
  tags: docker_container_guac_mfa
  when: guac_mfa_enabled

- name: docker_container guac - copy auth-totp to extension directory
  copy:
    src: '{{ docker_container_guac_volume_dir }}/guacamole-auth-totp-{{ docker_container_guac_version }}/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    dest: '{{ docker_container_guac_volume_dir }}/guac_home/extensions/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    remote_src: yes
  register: docker_container_guac_mfa_result
  tags: docker_container_guac_mfa
  when: guac_mfa_enabled

- name: docker_container guac - check if auth-totp extenstions file exists
  ansible.builtin.stat:
    path: '{{ docker_container_guac_volume_dir }}/guac_home/extensions/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
  register: docker_container_guac_mfa_file_exists_result

- name: docker_container guac - remove auth-totp extenstions file
  file:
    path: '{{ docker_container_guac_volume_dir }}/guac_home/extensions/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    state: absent
    register: docker_container_guac_mfa_file
  tags: docker_container_guac_mfa
  when:
    - guac_mfa_enabled == false
    - docker_container_guac_mfa_file_exists_result.stat.exists


- name: docker_container guac - backend net
  docker_network:
    name: "{{ docker_container_guac_name }}_backend"
    driver: bridge
    attachable: yes
    enable_ipv6: no
    internal: no
    state: present

- name: docker_container guac-db
  docker_container:
    name: "{{ docker_container_guac_db_name }}"
    image: "{{ docker_container_guac_db_image }}"
    state: started
    recreate: "{{ docker_container_guac_recreate | default('no') }}"
    restart: "{{ (docker_container_guac_env_result.changed or (docker_container_guac_mfa_result is defined and docker_container_guac_mfa_result.changed) or (docker_container_guac_mfa_file is defined and docker_container_guac_mfa_file.changed)) | ternary('yes', 'no') }}"
    restart_policy: always
    container_default_behavior: no_defaults
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    env_file: "{{ docker_container_guac_volume_dir }}/.env"
    env:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    volumes:
      - "{{ docker_container_guac_volume_dir }}/mysql:/var/lib/mysql"
      - "{{ docker_container_guac_volume_dir }}/mysql_init/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro"
    networks_cli_compatible: yes
    network_mode: "{{ docker_container_guac_name }}_backend"
    purge_networks: yes
    networks:
      - name: "{{ docker_container_guac_name }}_backend"

- name: docker_container guacd
  docker_container:
    name: "{{ docker_container_guac_d_name }}"
    image: "{{ docker_container_guac_d_image }}"
    state: started
    recreate: "{{ docker_container_guac_recreate | default('no') }}"
    restart: "{{ (docker_container_guac_env_result.changed or (docker_container_guac_mfa_result is defined and docker_container_guac_mfa_result.changed) or (docker_container_guac_mfa_file is defined and docker_container_guac_mfa_file.changed)) | ternary('yes', 'no') }}"
    restart_policy: always
    container_default_behavior: no_defaults
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    networks_cli_compatible: yes
    network_mode: "{{ docker_container_guac_name }}_backend"
    purge_networks: yes
    networks:
      - name: "{{ docker_container_guac_name }}_backend"

- name: docker_container guacamole
  docker_container:
    name: "{{ docker_container_guac_name }}"
    image: "{{ docker_container_guac_image }}"
    state: started
    recreate: "{{ docker_container_guac_recreate | default('no') }}"
    restart: "{{ (docker_container_guac_env_result.changed or (docker_container_guac_mfa_result is defined and docker_container_guac_mfa_result.changed) or (docker_container_guac_mfa_file is defined and docker_container_guac_mfa_file.changed)) | ternary('yes', 'no') }}"
    restart_policy: always
    container_default_behavior: no_defaults
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    env_file: "{{ docker_container_guac_volume_dir }}/.env"
    env:
      GUACAMOLE_HOME: "/guac_home"
      MYSQL_HOSTNAME: "mysql"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      GUACD_HOSTNAME: "guacd"
      GUACD_PORT: "4822"
    volumes:
      - "{{ docker_container_guac_volume_dir }}/guac_conf/server.xml:/usr/local/tomcat/conf/server.xml"
      - "{{ docker_container_guac_volume_dir }}/guac_home:/guac_home"
    networks_cli_compatible: yes
    network_mode: "{{ docker_container_guac_name }}_backend"
    purge_networks: yes
    networks:
      - name: "{{ docker_container_guac_name }}_backend"
        links:
          - "{{ docker_container_guac_db_name }}"
          - "{{ docker_container_guac_d_name }}"
    published_ports:
      - "8081:8080"
